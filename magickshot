#!/bin/sh

main() { parse_opts "$@"
    [ -z "$output_directory" ] && output_directory=~/.local/share/magickshot/Screenshots
    [ -z "$title" ] && title="%F_%R:%S" ; title="$(date +$title)"
    [ -z "$output_file" ] && output_file=$output_directory/import-$title.png

    if [ "$help" = true ]; then help
    elif [ "$selection" = true -a "$window" = true ]; then
	screenshot -window $(xdotool selectwindow)
    elif [ "$selection" = true ]; then
	xdotool mousemove_relative 1 0 && xdotool mousemove_relative -- -1 0
	screenshot
    elif [ -n "$window" ]; then screenshot -window "$window"
    elif [ "$display" = true ]; then screenshot -window root
    else
	screenshot -window root &&
	    magick -extract "$(randr | cut -d " " -f 3)"\
	    $output_file $output_file
    fi
}

screenshot() {
    pl() {
	[ -z $PLAYER ] && PLAYER="mpv"
	[ "$notify" = true ] && setsid $PLAYER --really-quiet --pause=no --keep-open=no "$@" &> /dev/null
    }

    [ ! -d "$sound_directory" ] && sound_directory=/usr/share/sounds/freedesktop/stereo
    [ ! -d "$sound_directory" ] && sound_directory=/usr/share/sounds/$(ls -t /usr/share/sounds/ | head -1)/stereo

    sound_success=$sound_directory/camera-shutter.*
    sound_failure=$sound_directory/dialog-error.*

    import "$@" $output_file &&
	{ pl $sound_success
	    if [ "$location" != true ]; then
		printf '%s\n' "$output_file" | sed 's|^./||'
	    fi
	} || pl $sound_failure
}

randr() {
    [ -z $monitor ] && monitor=$(printmon)
    xrandr | grep ' connected' | sed 's/ primary//g' |
	tail -$(expr $monitor + 1) | head -1
}

help() { printf 'Usage:\t%s' "magickshot [options] output_directory/output_file

Options:
-s|--selection       │ Sceenshot the selection
-w|--window=WINDOW   │ Screenshot the specified window (default: focused)
-m|--monitor=MONITOR │ Screenshot the specified monitor (default: focused)
-d|--display         │ Screenshot the entire display
                     │
-t|--title=TITLE     │ Specify the title format (default: %F_%R:%S)
-n|--notify          │ Play a notification sound
   --no-notify       │ Do not notify (always overrides \`--notify\`)
                     │
-h|--help            │ Print this help message and exit

Use both the selection and window arguments at the same time and you will be able to use the cursor to select a specific window to take a screenshot of. The default output file is \`~/.local/share/magickshot/Screenshots/import-$title.png\`.
"; }

parse_opts() {
    : "${config_dir:=${XDG_CONFIG_HOME:-$HOME/.config}/$(basename $0)}"
    : "${config_file:=$config_dir/$(basename $0).conf}"
    [ -f "$config_file" ] && . "$config_file"

    die() { printf '%s\n' "$*" >&2; exit 2; }
    needs_arg() { [ -z "$OPTARG" ] && die "No arg for --$OPT option"; }

    while getopts hnswmt:d-: OPT; do
	# Support long options: https://stackoverflow.com/a/28466267/519360
	if [ "$OPT" = "-" ]; then
	    OPT="${OPTARG%%=*}"
	    OPTARG="${OPTARG#$OPT}"
	    OPTARG="${OPTARG#=}"
	fi
	case "$OPT" in
	    h | help)     	help=true ;;
	    n | notify)		notify=true ;;
	    no-notify)		notify=false ;;
	    s | selection)	selection=true ;;
	    w | window)
		shift
		[ $(printf '%s' "$OPT" | wc -c) -eq 1 ] && OPTARG="$1"
		case "$OPTARG" in
		    ''|*[!0-9]*)	window=$(xdotool getactivewindow) ;;
		    *)			window="$OPTARG" ;;
		esac
		[ -n "$1" -a "$OPTARG" = "$1" -a "$window" = "$1" ] && shift
		;;
	    m | monitor)
		shift
    		[ $(printf '%s' "$OPT" | wc -c) -eq 1 ] && OPTARG="$1"
		case "$OPTARG" in ''|*[!0-9]*) ;; *) monitor="$OPTARG" ;; esac
		[ -n "$1" -a "$OPTARG" = "$1" -a "$monitor" = "$1" ] && shift
		;;
	    d | display)	display=true ;;
	    t | title)		needs_arg ; title="$OPTARG" ;;
	    ??*)          	die "Illegal option --$OPT" ;;
	    ?)            	exit 2 ;;
	esac
    done
    shift $((OPTIND-1))

    { [ -d "$1" ] && output_directory="$1"; } ||
    { [ -n "$1" ] && location=true output_file="$1"; }
}

main "$@"
